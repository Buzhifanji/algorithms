import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";import{o as l,c as o,a as n,b as t,w as e,d as i,e as s,r as c}from"./app.9175f07d.js";var r="/algorithms/merge-sort.gif";const u={},d=i('<h2 id="\u4ECB\u7ECD" tabindex="-1"><a class="header-anchor" href="#\u4ECB\u7ECD" aria-hidden="true">#</a> \u4ECB\u7ECD</h2><p>\u5F52\u5E76\u6392\u5E8F\u662F\u5EFA\u7ACB\u5728\u5F52\u5E76\u64CD\u4F5C\u4E0A\u7684\u4E00\u79CD\u6709\u6548\u7684\u6392\u5E8F\u7B97\u6CD5\u3002\u8BE5\u7B97\u6CD5\u662F\u91C7\u7528<strong>\u5206\u6CBB\u6CD5</strong>\uFF08Divide and Conquer\uFF09\u7684\u4E00\u4E2A\u975E\u5E38\u5178\u578B\u7684\u5E94\u7528\u3002\u5C06\u5DF2\u6709\u5E8F\u7684\u5B50\u5E8F\u5217\u5408\u5E76\uFF0C\u5F97\u5230\u5B8C\u5168\u6709\u5E8F\u7684\u5E8F\u5217\uFF1B\u5373\u5148\u4F7F\u6BCF\u4E2A\u5B50\u5E8F\u5217\u6709\u5E8F\uFF0C\u518D\u4F7F\u5B50\u5E8F\u5217\u6BB5\u95F4\u6709\u5E8F\u3002\u82E5\u5C06\u4E24\u4E2A\u6709\u5E8F\u8868\u5408\u5E76\u6210\u4E00\u4E2A\u6709\u5E8F\u8868\uFF0C\u79F0\u4E3A2-\u8DEF\u5F52\u5E76\u3002</p><h2 id="\u52A8\u56FE\u6F14\u793A" tabindex="-1"><a class="header-anchor" href="#\u52A8\u56FE\u6F14\u793A" aria-hidden="true">#</a> \u52A8\u56FE\u6F14\u793A</h2><p><img src="'+r+`" alt="alt" loading="lazy"></p><h2 id="\u4F2A\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#\u4F2A\u4EE3\u7801" aria-hidden="true">#</a> \u4F2A\u4EE3\u7801</h2><div class="language-console ext-console line-numbers-mode"><pre class="language-console"><code>MERGE(A, p, q, r)
n1 = q - p + 1
n2 = r -q
let L[1..n1 + 1] and R[1..n2 + 1] be new arrays
for i = 1 to n1
  L[i]= A[p + i -1]
for j = 1 to n2
  R[j] = A[q + j]
L[n1 + 1] = \u221E
R[n2 + 1] = \u221E
i = 1
j = 1
for k = p to r
  if L[i] &lt;= R[j]
    A[k] = L[i]
    i = i + 1
  else A[k] = R[i]
    j = j + 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-console ext-console line-numbers-mode"><pre class="language-console"><code>MERGE-SORT(A, p, r)
if p &lt; r
  q = (p + r) / 2
  MERGE-SORT(A, p, q)
  MERGE-SORT(A, p + 1, r)
  MERGE(A, p, q, r)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u7B97\u6CD5\u63CF\u8FF0" tabindex="-1"><a class="header-anchor" href="#\u7B97\u6CD5\u63CF\u8FF0" aria-hidden="true">#</a> \u7B97\u6CD5\u63CF\u8FF0</h2><ul><li>\u628A\u957F\u5EA6\u4E3An\u7684\u8F93\u5165\u5E8F\u5217\u5206\u6210\u4E24\u4E2A\u957F\u5EA6\u4E3An/2\u7684\u5B50\u5E8F\u5217\uFF1B</li><li>\u5BF9\u8FD9\u4E24\u4E2A\u5B50\u5E8F\u5217\u5206\u522B\u91C7\u7528\u5F52\u5E76\u6392\u5E8F\uFF1B</li><li>\u5C06\u4E24\u4E2A\u6392\u5E8F\u597D\u7684\u5B50\u5E8F\u5217\u5408\u5E76\u6210\u4E00\u4E2A\u6700\u7EC8\u7684\u6392\u5E8F\u5E8F\u5217\u3002</li></ul><h2 id="\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u5B9E\u73B0" aria-hidden="true">#</a> \u5B9E\u73B0</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * \u5408\u5E76\u4E24\u4E2A\u6709\u5E8F\u6570\u7EC4(\u76EE\u524D\u53EA\u8003\u8651\u5347\u5E8F)
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span>Array<span class="token punctuation">}</span></span> <span class="token parameter">leftArr</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span>Array<span class="token punctuation">}</span></span> <span class="token parameter">rightArr</span>
 */</span>
<span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">leftArr<span class="token punctuation">,</span> rightArr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// \u5229\u7528\u53CC\u6307\u9488</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> leftLen <span class="token operator">=</span> leftArr<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
    rightLen <span class="token operator">=</span> rightArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> leftLen <span class="token operator">||</span> right <span class="token operator">&lt;</span> rightLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> leftLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rightArr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">===</span> rightLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leftArr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>leftArr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&gt;</span> rightArr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rightArr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leftArr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * \u5F52\u5E76\u6392\u5E8F
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span>Array<span class="token punctuation">}</span></span> <span class="token parameter">arr</span>
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> left <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>middle<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u8BC1\u660E" tabindex="-1"><a class="header-anchor" href="#\u8BC1\u660E" aria-hidden="true">#</a> \u8BC1\u660E</h2><p>\u6211\u4EEC\u9700\u8981\u8BC1\u660E\u7B2C7~28\u884Cwhile\u5FAA\u73AF\u7684\u7B2C\u4E00\u6B21\u8FED\u4EE3\u4E4B\u524D\u8BE5\u5FAA\u73AF\u4E0D\u53D8\u5F0F\u6210\u7ACB\uFF0C\u8BE5\u5FAA\u73AF\u7684\u6BCF\u6B21\u8FED\u4EE3\u4FDD\u6301\u8BE5\u4E0D\u53D8\u5F0F\uFF0C\u5E76\u4E14\u7EC8\u6B62\u5FAA\u73AF\u65F6\uFF0C\u8BE5\u4E0D\u53D8\u5F0F\u63D0\u4F9B\u4E86\u4E00\u79CD\u6709\u7528\u7684\u6027\u8D28\u6765\u8BC1\u660E\u6B63\u786E\u6027\u3002</p>`,13),k=n("strong",null,"\u521D\u59CB\u5316",-1),m=s("\uFF1A\u5FAA\u73AF\u7684\u7B2C\u4E00\u6B21\u8FED\u4EE3\u4E4B\u524D\uFF0Cresult\u4E3A\u7A7A\uFF0C\u7B26\u5408"),v=s("\u5FAA\u73AF\u4E0D\u53D8\u5F0F"),h=n("strong",null,"\u4FDD\u6301",-1),b=s(": \u6BCF\u6B21\u5FAA\u73AF\u8FED\u4EE3\uFF0C\u4F1A\u628A\u4E24\u4E2A\u6709\u5E8F\u6570\u7EC4\u5F52\u5E76\u6210\u4E00\u4E2A\u6709\u5E8F\u6570\u7EC4\uFF0C\u67E5\u770B\u7B2C13 ~ 27\u884C\uFF0C\u901A\u8FC7\u4E24\u4E2A\u6307\u9488\uFF0C\u6BCF\u6B21\u8FED\u4EE3\u90FD\u4F1A\u53D6\u51FA\u4E24\u4E2A\u6570\u7EC4\u4E2D\u7684\u6700\u5C0F\u503C\uFF0C\u6240\u6709\u5F52\u5E76\u4E4B\u540E\u7684\u6570\u7EC4\u4E5F\u662F\u6709\u5E8F\u7684\uFF0C\u7B26\u5408"),g=s("\u5FAA\u73AF\u4E0D\u53D8\u5F0F"),f=n("li",null,[n("strong",null,"\u7EC8\u6B62"),s("\uFF1A\u5F53\u7EC8\u6B62\u5FAA\u73AF\u7684\u65F6\u5019\uFF0C\u6839\u636E\u5FAA\u73AF\u4E0D\u53D8\u5F0F\uFF0C\u5F52\u5E76\u7684\u6570\u7EC4\u6709\u5E8F\u7684\u3002")],-1),_=n("h2",{id:"\u590D\u6742\u5EA6",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u590D\u6742\u5EA6","aria-hidden":"true"},"#"),s(" \u590D\u6742\u5EA6")],-1),w=n("p",null,[s("\u65F6\u95F4\u590D\u6742\u5EA6\uFF1A"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mi",null,"l"),n("mi",null,"o"),n("mi",null,"g"),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(nlogn)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])])],-1),y=n("p",null,[s("\u7A7A\u95F4\u590D\u6742\u5EA6\uFF1A"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])])],-1);function E(A,x){const a=c("RouterLink");return l(),o("div",null,[d,n("ul",null,[n("li",null,[k,m,t(a,{to:"/base/1.%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.html#%E5%BE%AA%E7%8E%AF%E4%B8%8D%E5%8F%98%E5%BC%8F"},{default:e(()=>[v]),_:1})]),n("li",null,[h,b,t(a,{to:"/base/1.%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.html#%E5%BE%AA%E7%8E%AF%E4%B8%8D%E5%8F%98%E5%BC%8F"},{default:e(()=>[g]),_:1})]),f]),_,w,y])}var M=p(u,[["render",E],["__file","5.\u5F52\u5E76\u6392\u5E8F.html.vue"]]);export{M as default};
